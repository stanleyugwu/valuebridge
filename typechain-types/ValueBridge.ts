/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ValueBridgeInterface extends utils.Interface {
  functions: {
    "minTransferAmt()": FunctionFragment;
    "minWithdrawAmt()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerName()": FunctionFragment;
    "transfer(string)": FunctionFragment;
    "transfers(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "minTransferAmt"
      | "minWithdrawAmt"
      | "owner"
      | "ownerName"
      | "transfer"
      | "transfers"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "minTransferAmt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawAmt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerName", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transfers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "minTransferAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ValueReceived(address,uint256)": EventFragment;
    "ValueWithdrawn(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueWithdrawn"): EventFragment;
}

export interface ValueReceivedEventObject {
  _senderAddress: string;
  _sentAmt: BigNumber;
}
export type ValueReceivedEvent = TypedEvent<
  [string, BigNumber],
  ValueReceivedEventObject
>;

export type ValueReceivedEventFilter = TypedEventFilter<ValueReceivedEvent>;

export interface ValueWithdrawnEventObject {
  _withdrawnAmt: BigNumber;
}
export type ValueWithdrawnEvent = TypedEvent<
  [BigNumber],
  ValueWithdrawnEventObject
>;

export type ValueWithdrawnEventFilter = TypedEventFilter<ValueWithdrawnEvent>;

export interface ValueBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValueBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    minTransferAmt(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWithdrawAmt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerName(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _note: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; note: string }>;

    withdraw(
      _withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  minTransferAmt(overrides?: CallOverrides): Promise<BigNumber>;

  minWithdrawAmt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerName(overrides?: CallOverrides): Promise<string>;

  transfer(
    _note: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { amount: BigNumber; note: string }>;

  withdraw(
    _withdrawAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    minTransferAmt(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawAmt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerName(overrides?: CallOverrides): Promise<string>;

    transfer(_note: string, overrides?: CallOverrides): Promise<void>;

    transfers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; note: string }>;

    withdraw(
      _withdrawAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValueReceived(address,uint256)"(
      _senderAddress?: string | null,
      _sentAmt?: BigNumberish | null
    ): ValueReceivedEventFilter;
    ValueReceived(
      _senderAddress?: string | null,
      _sentAmt?: BigNumberish | null
    ): ValueReceivedEventFilter;

    "ValueWithdrawn(uint256)"(
      _withdrawnAmt?: BigNumberish | null
    ): ValueWithdrawnEventFilter;
    ValueWithdrawn(
      _withdrawnAmt?: BigNumberish | null
    ): ValueWithdrawnEventFilter;
  };

  estimateGas: {
    minTransferAmt(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawAmt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerName(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _note: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    minTransferAmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minWithdrawAmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _note: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
